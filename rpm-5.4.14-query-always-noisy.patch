--- rpm-5.4.14/lib/query.c.querynoise~	2013-07-26 10:19:38.000000000 +0200
+++ rpm-5.4.14/lib/query.c	2014-03-15 04:40:30.999603628 +0100
@@ -532,6 +532,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
     case RPMQV_WHATCONFLICTS:
     case RPMQV_WHATOBSOLETES:
 	qva->qva_mi = rpmtsInitIterator(ts, (rpmTag) qva->qva_source, arg, 0);
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	if(rpmmiCount(qva->qva_mi) == 0)
+	    qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	if (qva->qva_mi == NULL) {
 	    rpmlog(RPMLOG_NOTICE, _("key \"%s\" not found in %s table\n"),
 			arg, tagName((rpmTag)qva->qva_source));
@@ -604,6 +608,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
 	tag = (qva->qva_source == RPMQV_PKGID
 		? RPMTAG_SOURCEPKGID : RPMTAG_PKGID);
 	qva->qva_mi = rpmtsInitIterator(ts, (rpmTag) tag, MD5, MD5len);
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	if(rpmmiCount(qva->qva_mi) == 0)
+	    qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	if (qva->qva_mi == NULL) {
 	    rpmlog(RPMLOG_NOTICE, _("no package matches %s: %s\n"),
 			"pkgid", arg);
@@ -622,6 +630,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
 	}
 
 	qva->qva_mi = rpmtsInitIterator(ts, RPMTAG_SHA1HEADER, arg, 0);
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	if(rpmmiCount(qva->qva_mi) == 0)
+	    qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	if (qva->qva_mi == NULL) {
 	    rpmlog(RPMLOG_NOTICE, _("no package matches %s: %s\n"),
 			"hdrid", arg);
@@ -649,6 +661,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
             *t = (nibble(s[0]) << 4) | nibble(s[1]);
 
 	qva->qva_mi = rpmtsInitIterator(ts, RPMTAG_FILEDIGESTS, digest, dlen);
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	if(rpmmiCount(qva->qva_mi) == 0)
+	    qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	if (qva->qva_mi == NULL) {
 	    rpmlog(RPMLOG_NOTICE, _("no package matches %s: %s\n"),
 			"fileid", arg);
@@ -678,6 +694,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
 	    return 1;
 	}
 	qva->qva_mi = rpmtsInitIterator(ts, RPMTAG_INSTALLTID, &iid, sizeof(iid));
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	if(rpmmiCount(qva->qva_mi) == 0)
+	    qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	if (qva->qva_mi == NULL) {
 	    rpmlog(RPMLOG_NOTICE, _("no package matches %s: %s\n"),
 			"tid", arg);
@@ -689,6 +709,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
     case RPMQV_WHATNEEDS:
     case RPMQV_WHATREQUIRES:
 	qva->qva_mi = rpmtsInitIterator(ts, RPMTAG_REQUIRENAME, arg, 0);
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	if(rpmmiCount(qva->qva_mi) == 0)
+	    qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	if (qva->qva_mi == NULL) {
 	    rpmlog(RPMLOG_NOTICE, _("no package requires %s\n"), arg);
 	    res = 1;
@@ -700,6 +724,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
 	if (arg[0] != '/') {
 	    provides_checked = 1;
 	    qva->qva_mi = rpmtsInitIterator(ts, RPMTAG_PROVIDENAME, arg, 0);
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	    if(rpmmiCount(qva->qva_mi) == 0)
+		qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	    if (qva->qva_mi == NULL) {
 		rpmlog(RPMLOG_NOTICE, _("no package provides %s\n"), arg);
 		res = 1;
@@ -744,7 +772,7 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
 	qva->qva_mi = rpmtsInitIterator(ts, RPMTAG_FILEPATHS, fn, 0);
 	if (qva->qva_mi == NULL && !provides_checked && !gotpattern) {
 	    qva->qva_mi = rpmtsInitIterator(ts, RPMTAG_PROVIDENAME, fn, 0);
-#if defined(RPM_VENDOR_MANDRIVA)
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
 	if(rpmmiCount(qva->qva_mi) == 0)
 	    qva->qva_mi = rpmmiFree(qva->qva_mi);
 #endif
@@ -786,6 +814,10 @@ JBJDEBUG((stderr, "--> %s(%p,%p,%p)\n",
 	}
 	rpmlog(RPMLOG_DEBUG, D_("package record number: %u\n"), (unsigned)hdrNum);
 	qva->qva_mi = rpmtsInitIterator(ts, RPMDBI_PACKAGES, &hdrNum, sizeof(hdrNum));
+#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_PLD)
+	if(rpmmiCount(qva->qva_mi) == 0)
+	    qva->qva_mi = rpmmiFree(qva->qva_mi);
+#endif
 	if (qva->qva_mi == NULL) {
 	    rpmlog(RPMLOG_NOTICE,
 		_("record %u could not be read\n"), (unsigned)hdrNum);
