--- rpm-5.4.15/tools/debugedit.c.nested_func~	2015-04-14 10:35:46.966123535 +0200
+++ rpm-5.4.15/tools/debugedit.c	2015-04-14 10:35:56.806088771 +0200
@@ -1395,6 +1395,14 @@ error_out:
   return NULL;
 }
 
+
+static inline void process (const void *data, size_t size, hashFunctionContext *ctx)
+{
+	memchunk chunk = { .data = (void *) data, .size = size };
+	if (data != NULL && size != 0)
+		hashFunctionContextUpdateMC (ctx, &chunk);
+}
+
 /* Compute a fresh build ID bit-string from the editted file contents.  */
 static void
 handle_build_id (DSO *dso, Elf_Data *build_id,
@@ -1440,13 +1448,6 @@ handle_build_id (DSO *dso, Elf_Data *bui
      or Elf64 object, only that we are consistent in what bits feed the
      hash so it comes out the same for the same file contents.  */
   {
-    auto inline void process (const void *data, size_t size);
-    auto inline void process (const void *data, size_t size)
-    {
-      memchunk chunk = { .data = (void *) data, .size = size };
-      if (data != NULL && size != 0)
-        hashFunctionContextUpdateMC (&ctx, &chunk);
-    }
     union
     {
       GElf_Ehdr ehdr;
@@ -1478,7 +1479,7 @@ handle_build_id (DSO *dso, Elf_Data *bui
 	  goto bad;
 	if (elf64_xlatetom (&dest, &src, dso->ehdr.e_ident[EI_DATA]) == NULL)
 	  goto bad;
-	process (dest.d_buf, dest.d_size);
+	process (dest.d_buf, dest.d_size, &ctx);
       }
 
     src.d_type = ELF_T_SHDR;
@@ -1491,14 +1492,14 @@ handle_build_id (DSO *dso, Elf_Data *bui
 	  u1.shdr.sh_offset = 0;
 	  if (elf64_xlatetom (&dest, &src, dso->ehdr.e_ident[EI_DATA]) == NULL)
 	    goto bad;
-	  process (dest.d_buf, dest.d_size);
+	  process (dest.d_buf, dest.d_size, &ctx);
 
 	  if (u1.shdr.sh_type != SHT_NOBITS)
 	    {
 	      Elf_Data *d = elf_rawdata (dso->scn[i], NULL);
 	      if (d == NULL)
 		goto bad;
-	      process (d->d_buf, d->d_size);
+	      process (d->d_buf, d->d_size, &ctx);
 	    }
 	}
   }
