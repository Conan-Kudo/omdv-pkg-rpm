--- rpm-5.4.10/macros/python.in.omv~	2014-06-12 18:06:00.488718726 +0200
+++ rpm-5.4.10/macros/python.in	2014-06-12 18:08:00.469218764 +0200
@@ -11,25 +11,25 @@
 %__python_provides	%{_rpmhome}/pythoneggs.py --provides
 %__python_requires	%{_rpmhome}/pythoneggs.py --requires
 #
-%python_sitearch %(%{__python} -c "import os; from distutils.sysconfig import get_python_lib; lib=get_python_lib(1); print os.path.islink(lib) and os.path.abspath(os.path.join(os.path.dirname(lib),os.readlink(lib))) or lib")
-%python_sitelib	%(%{__python} -c "import os; from distutils.sysconfig import get_python_lib; lib=get_python_lib(); print os.path.islink(lib) and os.path.abspath(os.path.join(os.path.dirname(lib),os.readlink(lib))) or lib")
+%python_sitearch %(%{__python} -c "import os; from distutils.sysconfig import get_python_lib; lib=get_python_lib(1); print(os.path.islink(lib) and os.path.abspath(os.path.join(os.path.dirname(lib),os.readlink(lib))) or lib)")
+%python_sitelib	%(%{__python} -c "import os; from distutils.sysconfig import get_python_lib; lib=get_python_lib(); print(os.path.islink(lib) and os.path.abspath(os.path.join(os.path.dirname(lib),os.readlink(lib))) or lib)")
 %python_version	%(%{__python} -c "import sys; print(sys.version[0:3])")
 
 # python main version
-%py_ver                 %(%{__python} -c "import sys; v=sys.version_info[:2]; print '%%d.%%d'%%v" 2>/dev/null || echo PYTHON-NOT-FOUND)
-%py_prefix              %(%{__python} -c "import sys; print sys.prefix" 2>/dev/null || echo PYTHON-NOT-FOUND)
-%py_platlibdir          %(%{__python} -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib(standard_lib=1,plat_specific=1)' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
-%py_purelibdir          %(%{__python} -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib(standard_lib=1,plat_specific=0)' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
+%py_ver                 %(%{__python} -c "import sys; v=sys.version_info[:2]; print('%%d.%%d'%%v)" 2>/dev/null || echo PYTHON-NOT-FOUND)
+%py_prefix              %(%{__python} -c "import sys; print(sys.prefix)" 2>/dev/null || echo PYTHON-NOT-FOUND)
+%py_platlibdir          %(%{__python} -c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(standard_lib=1,plat_specific=1))' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
+%py_purelibdir          %(%{__python} -c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(standard_lib=1,plat_specific=0))' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
 # backward compatibility
 %py_libdir              %py_purelibdir
 
-%py_platsitedir         %(%{__python} -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib(plat_specific=1)' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
-%py_puresitedir         %(%{__python} -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib()' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
+%py_platsitedir         %(%{__python} -c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(plat_specific=1))' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
+%py_puresitedir         %(%{__python} -c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib())' 2>/dev/null || echo PYTHON-LIBDIR-NOT-FOUND)
 %py_sitedir             %py_puresitedir
 
 %py_dyndir		%{py_platlibdir}/lib-dynload
 
-%py_incdir              %(%{__python} -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_inc()' 2>/dev/null || echo PYTHON-INCLUDEDIR-NOT-FOUND)
+%py_incdir              %(%{__python} -c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_inc())' 2>/dev/null || echo PYTHON-INCLUDEDIR-NOT-FOUND)
 
 %py_compile(O)  \
 find %1 -name '*.pyc' -exec rm -f {} \\; \
--- rpm-5.4.10/scripts/pythoneggs.py.omv~	2014-06-12 18:08:10.656091410 +0200
+++ rpm-5.4.10/scripts/pythoneggs.py	2014-06-12 18:08:19.322983059 +0200
@@ -31,14 +31,14 @@ buildroot = None
 
 for o, a in opts:
     if o in ('-h', '--help'):
-        print '-h, --help\tPrint help'
-        print '-P, --provides\tPrint Provides'
-        print '-R, --requires\tPrint Requires'
-        print '-S, --suggests\tPrint Suggests'
-        print '-C, --conflicts\tPrint Conflicts'
-        print '-O, --obsoletes\tPrint Obsoletes (unused)'
-        print '-E, --extras\tPrint Extras '
-        print '-b, --buildroot\tBuildroot for package '
+        print('-h, --help\tPrint help')
+        print('-P, --provides\tPrint Provides')
+        print('-R, --requires\tPrint Requires')
+        print('-S, --suggests\tPrint Suggests')
+        print('-C, --conflicts\tPrint Conflicts')
+        print('-O, --obsoletes\tPrint Obsoletes (unused)')
+        print('-E, --extras\tPrint Extras ')
+        print('-b, --buildroot\tBuildroot for package ')
         exit(1)
     elif o in ('-P', '--provides'):
         Provides = True
@@ -175,11 +175,11 @@ for f in files:
         if Extras:
             deps = dist.requires()
             extras = dist.extras
-            print extras
+            print(extras)
             for extra in extras:
-                print '%%package\textras-%s' % extra
-                print 'Summary:\t%s extra for %s python egg' % (extra, dist.key)
-                print 'Group:\t\tDevelopment/Python'
+                print('%%package\textras-%s' % extra)
+                print('Summary:\t%s extra for %s python egg' % (extra, dist.key))
+                print('Group:\t\tDevelopment/Python')
                 depsextras = dist.requires(extras=[extra])
                 for dep in reversed(depsextras):
                     if dep in deps:
@@ -188,12 +188,12 @@ for f in files:
                 for dep in deps:
                     for spec in dep.specs:
                         if spec[0] == '!=':
-                            print 'Conflicts:\t%s %s %s' % (dep.key, '==', spec[1])
+                            print('Conflicts:\t%s %s %s' % (dep.key, '==', spec[1]))
                         else:
-                            print 'Requires:\t%s %s %s' % (dep.key, spec[0], spec[1])
-                print '%%description\t%s' % extra
-                print '%s extra for %s python egg' % (extra, dist.key)
-                print '%%files\t\textras-%s\n' % extra
+                            print('Requires:\t%s %s %s' % (dep.key, spec[0], spec[1]))
+                print('%%description\t%s' % extra)
+                print('%s extra for %s python egg' % (extra, dist.key))
+                print('%%files\t\textras-%s\n' % extra)
         if Conflicts:
             # Should we really add conflicts for extras?
             # Creating a meta package per extra with suggests on, which has
@@ -207,13 +207,13 @@ for f in files:
                         spec = ('==', spec[1])
                         if not spec in py_deps[name]:
                             py_deps[name].append(spec)
-names = py_deps.keys()
+names = list(py_deps.keys())
 names.sort()
 for name in names:
     if py_deps[name]:
         # Print out versioned provides, requires, suggests, conflicts
         for spec in py_deps[name]:
-            print '%s %s %s' % (name, spec[0], spec[1])
+            print('%s %s %s' % (name, spec[0], spec[1]))
     else:
         # Print out unversioned provides, requires, suggests, conflicts
-        print name
+        print(name)
--- rpm/scripts/symclash.py	(original)
+++ rpm/scripts/symclash.py	(refactored)
@@ -75,8 +75,8 @@
                     if l != l2 and w[1].match(l2):
                         libraries.remove(l2)
 
-for s in syms.keys():
-    filter(s, syms[s])
+for s in list(syms.keys()):
+    list(filter(s, syms[s]))
     if len(syms[s]) > 1:
         libs = " ".join(syms[s])
         if libs in clashes:
@@ -109,9 +109,9 @@
 #    print "Symbol clashes between libraries %s:\n  => %s\n" % (c, list_clashes(clashes[c]))
 #
 
-print "\n\nClashes by library:"
+print("\n\nClashes by library:")
 
-for l in clashes_bylib.keys():
-    print "\nClashes for %s:" % l
+for l in list(clashes_bylib.keys()):
+    print("\nClashes for %s:" % l)
     for l2 in clashes_bylib[l]:
-        print "  with %s => %s" % (l2, list_clashes(clashes_bylib[l][l2]))
+        print("  with %s => %s" % (l2, list_clashes(clashes_bylib[l][l2])))
