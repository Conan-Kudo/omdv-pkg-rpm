--- rpm-5.4.10/build/misc.c.deprecate_epoch~	2008-07-31 04:40:05.000000000 +0200
+++ rpm-5.4.10/build/misc.c	2014-06-16 13:34:10.338758240 +0200
@@ -18,3 +18,14 @@ int parseNum(const char * line, rpmuint3
     if (res) *res = rc;
     return (((*s1) || (s1 == line) || (rc == ULONG_MAX)) ? 1 : 0);
 }
+
+int parseSignedNum(const char * line, rpmint32_t * res)
+{
+    char * s1 = NULL;
+    unsigned long rc;
+
+    if (line == NULL) return 1;
+    rc = strtol(line, &s1, 10);
+    if (res) *res = rc;
+    return (((*s1) || (s1 == line) || (rc == LONG_MAX)) ? 1 : 0);
+}
--- rpm-5.4.10/build/parsePreamble.c.deprecate_epoch~	2014-06-16 13:34:10.292091115 +0200
+++ rpm-5.4.10/build/parsePreamble.c	2014-06-16 13:34:10.342091606 +0200
@@ -613,7 +613,7 @@ static rpmRC handlePreambleTag(Spec spec
     int multiToken = 0;
     rpmsenseFlags tagflags;
     int len;
-    rpmuint32_t num;
+    rpmint32_t num;
     int rc;
     int xx;
     
@@ -769,7 +769,7 @@ static rpmRC handlePreambleTag(Spec spec
     case RPMTAG_XMINOR:
     case RPMTAG_EPOCH:
 	SINGLE_TOKEN_ONLY;
-	if (parseNum(field, &num)) {
+	if (parseSignedNum(field, &num)) {
 	    rpmlog(RPMLOG_ERR,
 		     _("line %d: %s takes an integer value: %s\n"),
 		     spec->lineNum, tagName(tag), spec->line);
@@ -777,7 +777,7 @@ static rpmRC handlePreambleTag(Spec spec
 	}
 	he->tag = tag;
 	he->t = RPM_UINT32_TYPE;
-	he->p.ui32p = &num;
+	he->p.ui32p = (rpmuint32_t*)&num;
 	he->c = 1;
 	xx = headerPut(pkg->header, he, 0);
 	break;
@@ -1212,11 +1212,11 @@ assert(lastpkg != NULL);
     /* Add Epoch: 0 to package header if it was not set by spec */
     he->tag = RPMTAG_NAME;
     if (headerGet(spec->packages->header, he, 0) == 0) {
-    	rpmuint32_t num = 0;
+    	rpmint32_t num = 0;
 
 	he->tag = RPMTAG_EPOCH;
 	he->t = RPM_UINT32_TYPE;
-	he->p.ui32p = &num;
+	he->p.ui32p = (rpmuint32_t*)&num;
 	he->c = 1;
 	xx = headerPut(pkg->header, he, 0);
 
--- rpm-5.4.10/build/parseReqs.c.deprecate_epoch~	2014-06-16 13:34:10.202090231 +0200
+++ rpm-5.4.10/build/parseReqs.c	2014-06-16 13:34:10.342091606 +0200
@@ -28,6 +28,7 @@ rpmRC parseRCPOT(Spec spec, Package pkg,
     Header h;
     rpmRC rc = RPMRC_FAIL;	/* assume failure */
     int ix;
+    int negativeEpoch = 0;
 
     switch (tagN) {
     case RPMTAG_PROVIDEFLAGS:
@@ -182,10 +183,17 @@ rpmRC parseRCPOT(Spec spec, Package pkg,
 			spec->lineNum, "EVR", spec->line);
 		goto exit;
 	    }
+	    /* accept a '-' at beginning of EVR as we now accept negative
+	     * integers as epoch values in order to be able to deprecate them
+	     */
 	    if (nr > 1) {
-		rpmlog(RPMLOG_ERR, _("line %d: Illegal char '-' in %s: %s\n"),
-			spec->lineNum, "EVR", spec->line);
-		goto exit;
+	       if (EVR[0] == '-' && strchr(EVR, ':') != NULL)
+		   negativeEpoch = 1;
+	       else {
+		   rpmlog(RPMLOG_ERR, _("line %d: Illegal char '-' in %s: %s\n"),
+			   spec->lineNum, "EVR", spec->line);
+		   goto exit;
+	       }
             }
 	    /* EVR must be parseable (or a macro). */
 	    ix = 0;
@@ -194,6 +202,8 @@ rpmRC parseRCPOT(Spec spec, Package pkg,
 	    {
 		memset(evr, 0, sizeof(*evr));
 		ix = rpmEVRparse(EVR, evr);
+		if (negativeEpoch)
+		    assert(evr->F[RPMEVR_E][0] == '-');
 		evr->str = _free(evr->str);
 	    }
 	    if (ix != 0) {
--- rpm-5.4.10/build/rpmbuild.h.deprecate_epoch~	2014-06-16 13:34:10.202090231 +0200
+++ rpm-5.4.10/build/rpmbuild.h	2014-06-16 13:34:10.342091606 +0200
@@ -233,6 +233,15 @@ int parseNum(/*@null@*/ const char * lin
 	/*@modifies *res @*/;
 
 /** \ingroup rpmbuild
+ * Parse a signed number.
+ * @param		line from spec file
+ * @retval res		pointer to int
+ * @return		0 on success, 1 on failure
+ */
+int parseSignedNum(/*@null@*/ const char * line, /*@null@*/ /*@out@*/rpmint32_t * res)
+	/*@modifies *res @*/;
+
+/** \ingroup rpmbuild
  * Add changelog entry to header.
  * @todo addChangelogEntry should be static.
  * @param h		header
--- rpm-5.4.10/macros/macros.in.deprecate_epoch~	2014-06-16 13:34:10.315424677 +0200
+++ rpm-5.4.10/macros/macros.in	2014-06-16 13:34:10.342091606 +0200
@@ -740,7 +740,7 @@ $_arbitrary_tags_tests	Foo:Bar
 # STEP 1: Match the string and capture regex parts
 #                      1          2           3             4
 #                      E      ":" V        "-"R          ":"D
-#%evr_tuple_match  ^(?:([^:-]+):)?([^:-]+)(?:-([^:-]+))?(?::([^:-]+))?$
+#%evr_tuple_match  ^(?:(-?[^:-]+):)?([^:-]+)(?:-([^:-]+))?(?::([^:-]+))?$
 
 # STEP 2: Assemble <E,V,R,D> tuple from regex parts
 # <E,V,R,D>         case 1:  case 2:  case 3:  case 4:  case 5:  case 6:
@@ -755,7 +755,7 @@ $_arbitrary_tags_tests	Foo:Bar
 # STEP 1: Match the string and capture regex parts
 #                      1          2           3              4             5
 #                      E      ":" V        "~"T           "-"R          ":"D
-%evr_tuple_match   ^(?:([^:-]+):)?([^:~-]+)(?:~([^:-]+))?(?:-([^:-]+))?(?::([^:-]+))?$
+%evr_tuple_match   ^(?:(-?[^:-]+):)?([^:~-]+)(?:~([^:-]+))?(?:-([^:-]+))?(?::([^:-]+))?$
 
 # STEP 2: Assemble <E,V,T,R,D> tuple from regex parts (11 cases)
 #     E:V~T-R:D    12345
@@ -776,7 +776,7 @@ $_arbitrary_tags_tests	Foo:Bar
    
 # data validation patterns for identifier tags
 %pattern_Name		^[A-Za-z0-9][A-Za-z0-9+._-]*$
-%pattern_Epoch		^[0-9]+$
+%pattern_Epoch		^(-?)[0-9]+$
 %pattern_Version	^[A-Za-z0-9+._~]+$
 %pattern_Release	^[A-Za-z0-9+._]+$
 %pattern_Disttag	^[A-Za-z0-9]+$
--- rpm-5.4.10/perl/RPM_Header.xs.deprecate_epoch~	2012-04-25 22:34:49.000000000 +0200
+++ rpm-5.4.10/perl/RPM_Header.xs	2014-06-16 13:34:10.342091606 +0200
@@ -404,9 +404,16 @@ tag(h, sv_tag)
 
                         EXTEND(SP, he->c);
 
-                        for (i = 0; i < (int)he->c; i++) {
-                            PUSHs(sv_2mortal(newSViv(he->p.ui32p[i])));
-                        }
+                        /* not sure if necessary...? */
+                        if (he->tag == RPMTAG_EPOCH) {
+			    for (i = 0; i < (int)he->c; i++) {
+				PUSHs(sv_2mortal(newSViv((int32_t)he->p.ui32p[i])));
+			    }
+			} else {
+			    for (i = 0; i < (int)he->c; i++) {
+				PUSHs(sv_2mortal(newSViv(he->p.ui32p[i])));
+			    }
+			}
                     }
                 break;
                 case RPM_BIN_TYPE:
--- rpm-5.4.10/rpmdb/rpmevr.c.deprecate_epoch~	2012-07-06 17:39:18.000000000 +0200
+++ rpm-5.4.10/rpmdb/rpmevr.c	2014-06-16 13:35:15.882734585 +0200
@@ -148,7 +148,7 @@ assert(b != NULL);
 
 /*@unchecked@*/ /*@observer@*/ /*@null@*/
 static const char * _evr_tuple_match =
-	"^(?:([^:-]+):)?([^:-]+)(?:-([^:-]+))?(?::([^:-]+))?$";
+	"^(?:(-?[^:-]+):)?([^:-]+)(?:-([^:-]+))?(?::([^:-]+))?$";
 /*@unchecked@*/ /*@only@*/ /*@observer@*/ /*@null@*/
 const char * evr_tuple_match = NULL;
 /*@unchecked@*/ /*@refcounted@*/ /*@null@*/
@@ -289,6 +289,7 @@ assert(b->F[RPMEVR_D] != NULL);
 
     for (s = rpmEVRorder(); *s != '\0'; s++) {
 	int ix = 0;
+	int anegoff = 0, bnegoff = 0;
 
 	switch ((int)*s) {
 	default:	continue;	/*@notreached@*/ /*@switchbreak@*/break;
@@ -305,6 +306,20 @@ assert(b->F[RPMEVR_D] != NULL);
 		break;
 #endif
 
+	if (ix == RPMEVR_E) {
+	    if (*a->F[ix] == '-') {
+		if (*b->F[ix] == '0')
+			a->F[ix] = "0";
+		else
+		    anegoff++;
+	    } else if (*b->F[ix] == '-') {
+		if (*a->F[ix] == '0')
+		    b->F[ix] = "0";
+		else
+    		    bnegoff++;
+	    }
+	}
+
 	/* XXX ALT version-set comparison */
 	if (ix == RPMEVR_V
 	 && !strncmp(a->F[ix], "set:", sizeof("set:")-1)
@@ -323,7 +338,13 @@ assert(b->F[RPMEVR_D] != NULL);
 	if (ix == RPMEVR_T)	/* XXX twiddle-in-version "negative" compare */
 	    rc = -compare_values(a->F[ix], b->F[ix]);
 	else
-	    rc = compare_values(a->F[ix], b->F[ix]);
+	    rc = compare_values(a->F[ix]+anegoff, b->F[ix]+bnegoff);
+	if (!rc && ix == RPMEVR_E) {
+		if (anegoff && !bnegoff)
+		    rc = 1;
+		else if (!anegoff && bnegoff)
+		    rc = -1;
+	}
 	if (rc)
 	    break;
     }
@@ -421,7 +442,7 @@ int rpmVersionCompare(Header A, Header B
     HE_t Ahe = (HE_t) memset(alloca(sizeof(*Ahe)), 0, sizeof(*Ahe));
     HE_t Bhe = (HE_t) memset(alloca(sizeof(*Bhe)), 0, sizeof(*Bhe));
     const char * one, * two;
-    rpmuint32_t Eone, Etwo;
+    rpmint32_t Eone, Etwo;
     const char * s;
     int rc = 0;
     int xx;
@@ -436,10 +457,12 @@ int rpmVersionCompare(Header A, Header B
 	    Bhe->tag = RPMTAG_EPOCH;
 	    xx = headerGet(B, Bhe, 0);
 	    Etwo = (xx && Bhe->p.ui32p ? Bhe->p.ui32p[0] : 0);
-	    if (Eone < Etwo)
-		rc = -1;
-	    else if (Eone > Etwo)
-		rc = 1;
+	    if ((Eone == Etwo) || (Eone < 0 && Etwo == 0) || (Eone == 0 && Etwo < 0))
+		break;
+	    else if (Eone >= 0 && Etwo >= 0) rc = (Eone < Etwo) ? -1 : 1;
+	    else if (Eone < 0 && Etwo < 0) rc = (Eone > Etwo) ? -1 : 1;
+	    else if (Eone > 0 && Etwo < 0) rc = ((Eone + Etwo) <= 0) ? -1 : 1;
+	    else if (Eone < 0 && Etwo > 0) rc = ((Etwo + Eone) <= 0) ? -1 : 1;
 	    /*@switchbreak@*/ break;
 	case 'V':
 	    Ahe->tag = RPMTAG_VERSION;
